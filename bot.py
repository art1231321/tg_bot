import os
import json
import logging
from typing import Dict, List, Tuple, Optional
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineQuery,
    InlineQueryResultVoice,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ú–æ–∏ –∏–º–ø–æ—Ä—Ç—ã
from video_processor import convert_video_to_voice
from access_control import AccessControl
from keyboards import (
    get_main_keyboard,
    get_admin_main_keyboard,
    get_admin_management_keyboard,
    get_speaker_management_keyboard,
    get_voices_keyboard,
    get_access_request_keyboard
)
from states import RenameStates, AccessStates, AdminStates
from voice_storage import VoiceStorage

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
LOG_CHANNEL_ID = os.getenv("LOG_CHANNEL_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
SUPER_ADMIN = int(os.getenv("SUPER_ADMIN"))
storage = VoiceStorage()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
def get_admins():
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ—Ç ADMIN_IDS –∏–∑ —Ñ–∞–π–ª–∞"""
    load_dotenv()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º .env
    return [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]

def get_users():
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ—Ç USER_IDS –∏–∑ —Ñ–∞–π–ª–∞"""
    load_dotenv()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º .env
    return [int(id) for id in os.getenv("USER_IDS", "").split(",") if id]
    
class AdminStates(StatesGroup):
    waiting_admin_id = State()
    waiting_speaker_id = State()
    
def update_env_file(key: str, value: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env —Ñ–∞–π–ª–µ"""
    with open('.env', 'r') as f:
        lines = f.readlines()
    
    with open('.env', 'w') as f:
        for line in lines:
            if line.startswith(key):
                f.write(f"{key}={value}\n")
            else:
                f.write(line)

# ==============================================
# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ==============================================
@dp.message(Command("admin_panel"))
async def admin_panel(message: Message):
    if message.from_user.id != SUPER_ADMIN:
        await message.answer("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è SUPER_ADMIN!")
        return
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SUPER_ADMIN:",
        reply_markup=get_admin_main_keyboard()
    )

@dp.message(CommandStart())
async def cmd_start(message: Message):
    if AccessControl.is_admin(message.from_user.id):
        await message.answer(
            "üéôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            reply_markup=get_main_keyboard()
        )
    elif AccessControl.is_user(message.from_user.id):
        await message.answer(
            "üéôÔ∏è –ë–æ—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º (@–≤–∞—à_–±–æ—Ç) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
        )
    else:
        await message.answer(
            "üö´ –≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üì® –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="request_access")
            ]])
        )
               
# ======================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ======================

async def get_user_info(user_id: int) -> str:
    try:
        user = await bot.get_chat(user_id)
        return f"@{user.username}" if user.username else f"{user.full_name} (ID: {user.id})"
    except Exception:
        return str(user_id)

async def get_user_display_info(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (username + ID)"""
    try:
        user = await bot.get_chat(user_id)
        if user.username:
            return f"@{user.username} (ID: {user_id})"
        return f"{user.full_name} (ID: {user_id})"
    except Exception:
        return f"ID: {user_id}"

def reload_env_vars():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    global SUPER_ADMIN
    load_dotenv(override=True)
    SUPER_ADMIN = int(os.getenv("SUPER_ADMIN"))

# ==============================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã–º–∏
# ==============================================

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö")
async def list_voices(message: Message):
    if not AccessControl.is_admin(message.from_user.id):
        return
    
    if not storage.voices:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=get_main_keyboard())
        return
    
    voices_list = "\n".join(f"üîπ {title}" for title in storage.voices)
    await message.answer(
        f"üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({len(storage.voices)}):\n\n{voices_list}",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
async def rename_voice_start(message: Message):
    if not AccessControl.is_admin(message.from_user.id):
        return
    
    if not storage.voices:
        await message.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", reply_markup=get_main_keyboard())
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_voices_keyboard("rename")
    )

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
async def delete_voice_start(message: Message):
    if not AccessControl.is_admin(message.from_user.id):
        return
    
    if not storage.voices:
        await message.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=get_main_keyboard())
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_voices_keyboard("delete")
    )

@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é")
async def refresh_menu(message: Message):
    if not AccessControl.is_admin(message.from_user.id):
        return
    
    await message.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", reply_markup=get_main_keyboard())

# ==============================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞
# ==============================================

@dp.message(F.voice)
async def handle_voice(message: Message):
    if not AccessControl.is_admin(message.from_user.id):
        return
    
    title = f"–ì–æ–ª–æ—Å–æ–≤–æ–µ {len(storage.voices) + 1}"
    if storage.save_voice(title, message.voice.file_id):
        await message.reply(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {title}", reply_markup=get_main_keyboard())
    else:
        await message.reply("‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ", reply_markup=get_main_keyboard())

@dp.message(F.video | F.video_note)
async def handle_video(message: Message):
    if not AccessControl.is_admin(message.from_user.id):
        return
    
    try:
        await message.reply("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ...")
        if file_id := await convert_video_to_voice(message):
            title = f"–í–∏–¥–µ–æ-–∞—É–¥–∏–æ {len(storage.voices) + 1}"
            if storage.save_voice(title, file_id):
                await message.reply(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {title}")
            else:
                await message.reply("‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ")
    except Exception as e:
        logger.error(f"Video processing error: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")

# ==============================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
# ==============================================

@dp.callback_query(F.data.startswith("rename:"))
async def rename_voice_callback(callback: types.CallbackQuery, state: FSMContext):
    if not AccessControl.is_admin(callback.from_user.id):
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    old_title = callback.data.split(":")[1]
    await state.update_data(old_title=old_title)
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è '{old_title}':\n"
        "(–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)"
    )
    await callback.answer()
    await state.set_state(RenameStates.waiting_for_new_title)

@dp.callback_query(F.data.startswith("delete:"))
async def delete_voice_callback(callback: types.CallbackQuery):
    if not AccessControl.is_admin(callback.from_user.id):
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    title = callback.data.split(":")[1]
    if storage.delete_voice(title):
        await callback.message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ '{title}' —É–¥–∞–ª–µ–Ω–æ", reply_markup=get_main_keyboard())
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=get_main_keyboard())
    await callback.answer()

@dp.message(RenameStates.waiting_for_new_title)
async def handle_new_title(message: Message, state: FSMContext):
    if message.text.startswith('/'):
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è")
        return

    data = await state.get_data()
    old_title = data.get('old_title')
    new_title = message.text.strip()

    if not old_title:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_main_keyboard())
        await state.clear()
        return

    if len(new_title) > 32:  # MAX_TITLE_LENGTH
        await message.reply("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)")
        return

    if storage.rename_voice(old_title, new_title):
        await message.reply(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Å '{old_title}' –Ω–∞ '{new_title}'",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.reply(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "- –¢–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            "- –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ",
            reply_markup=get_main_keyboard()
        )

    await state.clear()

# ==============================================
# –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
# ==============================================

@dp.inline_query()
async def inline_voices(query: InlineQuery):
    if not AccessControl.is_user(query.from_user.id):
        await query.answer(
            results=[],
            switch_pm_text="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø?",
            switch_pm_parameter="request_access",
            cache_time=300
        )
        return

    search_query = query.query.strip().lower()
    results = []

    for idx, (title, file_id) in enumerate(storage.get_all_voices()):
        if search_query and not title.lower().startswith(search_query):
            continue

        results.append(
            InlineQueryResultVoice(
                id=str(idx),
                voice_file_id=file_id,
                title=title,
                voice_url=""
            )
        )

        if len(results) >= 50:
            break

    await query.answer(results, cache_time=0, is_personal=True)
    
# ======================
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏
# ======================

@dp.message(F.text == "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
async def manage_admins(message: Message):
    if message.from_user.id != SUPER_ADMIN:
        return
    
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:",
        reply_markup=get_admin_management_keyboard()
    )

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def list_admins(message: Message):
    if message.from_user.id != SUPER_ADMIN:
        return
    
    admins = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]
    response = ["üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:"]
    
    for admin_id in admins:
        user_info = await get_user_display_info(admin_id)
        response.append(f"‚Ä¢ {user_info}")
    
    if not admins:
        response.append("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    
    await message.answer("\n".join(response))

def get_admins() -> list[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    load_dotenv()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º .env
    admin_ids = os.getenv("ADMIN_IDS", "")
    return [int(id) for id in admin_ids.split(",") if id.strip()]

def update_admins(admin_ids: list[int]):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ .env"""
    admins_str = ",".join(map(str, admin_ids))
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env
    with open('.env', 'r') as f:
        lines = f.readlines()
    
    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª, –æ–±–Ω–æ–≤–ª—è—è —Ç–æ–ª—å–∫–æ ADMIN_IDS
    with open('.env', 'w') as f:
        admin_updated = False
        for line in lines:
            if line.startswith("ADMIN_IDS="):
                f.write(f"ADMIN_IDS={admins_str}\n")
                admin_updated = True
            elif not line.strip().startswith("#") and "=" in line:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                f.write(line)
        
        if not admin_updated:
            f.write(f"ADMIN_IDS={admins_str}\n")

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin_start(message: Message, state: FSMContext):
    if message.from_user.id != SUPER_ADMIN:
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_admin_id)

@dp.message(AdminStates.waiting_admin_id)
async def add_admin_finish(message: Message, state: FSMContext):
    try:
        user_input = message.text.strip()
        user_id = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username
        if user_input.startswith("@"):
            try:
                user = await bot.get_chat(user_input)
                user_id = user.id
            except Exception:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ ID –≤—Ä—É—á–Ω—É—é")
                return
        else:
            try:
                user_id = int(user_input)
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username")
                return
        
        admins = get_admins()
        
        if user_id in admins:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return
        
        admins.append(user_id)
        update_admins(admins)
        reload_env_vars()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        
        user_info = await get_user_display_info(user_id)
        await message.answer(
            f"‚úÖ {user_info} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            reply_markup=get_admin_management_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
    finally:
        await state.clear()

@dp.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def remove_admin_start(message: Message):
    if message.from_user.id != SUPER_ADMIN:
        return
    
    admins = get_admins()
    
    if not admins:
        await message.answer("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    builder = InlineKeyboardBuilder()
    for admin_id in admins:
        user_info = await get_user_display_info(admin_id)
        builder.button(
            text=user_info,
            callback_data=f"remove_admin:{admin_id}"
        )
    builder.adjust(1)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("remove_admin:"))
async def remove_admin_callback(callback: CallbackQuery):
    if callback.from_user.id != SUPER_ADMIN:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        admin_id = int(callback.data.split(":")[1])
        admins = get_admins()
        
        if admin_id in admins:
            admins.remove(admin_id)
            update_admins(admins)
            reload_env_vars()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            
            user_info = await get_user_display_info(admin_id)
            await callback.message.edit_text(f"‚úÖ {user_info} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        else:
            await callback.message.edit_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    finally:
        await callback.answer()

# ======================
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–≤–æ—Ä—É–Ω–∞–º–∏
# ======================

@dp.message(F.text == "üó£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–≤–æ—Ä—É–Ω–∞–º–∏")
async def manage_speakers(message: Message):
    if message.from_user.id != SUPER_ADMIN:
        return
    
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–≤–æ—Ä—É–Ω–∞–º–∏:",
        reply_markup=get_speaker_management_keyboard()
    )

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –≥–æ–≤–æ—Ä—É–Ω–æ–≤")
async def list_speakers(message: Message):
    if message.from_user.id != SUPER_ADMIN:
        return
    
    users = [int(id) for id in os.getenv("USER_IDS", "").split(",") if id]
    response = ["üó£ –°–ø–∏—Å–æ–∫ –≥–æ–≤–æ—Ä—É–Ω–æ–≤:"]
    
    for user_id in users:
        user_info = await get_user_display_info(user_id)
        response.append(f"‚Ä¢ {user_info}")
    
    if not users:
        response.append("‚ùå –ù–µ—Ç –≥–æ–≤–æ—Ä—É–Ω–æ–≤")
    
    await message.answer("\n".join(response))

def get_users() -> list[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    load_dotenv()
    user_ids = os.getenv("USER_IDS", "")
    return [int(id) for id in user_ids.split(",") if id.strip()]

def update_users(user_ids: list[int]):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ .env"""
    users_str = ",".join(map(str, user_ids))
    with open('.env', 'r') as f:
        lines = f.readlines()
    
    with open('.env', 'w') as f:
        users_updated = False
        for line in lines:
            if line.startswith("USER_IDS="):
                f.write(f"USER_IDS={users_str}\n")
                users_updated = True
            elif not line.strip().startswith("#") and "=" in line:
                f.write(line)
        
        if not users_updated:
            f.write(f"USER_IDS={users_str}\n")

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ–≤–æ—Ä—É–Ω–∞")
async def add_speaker_start(message: Message, state: FSMContext):
    if message.from_user.id != SUPER_ADMIN:
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –Ω–æ–≤–æ–≥–æ –≥–æ–≤–æ—Ä—É–Ω–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_speaker_id)

@dp.message(AdminStates.waiting_speaker_id)
async def add_speaker_finish(message: Message, state: FSMContext):
    try:
        user_input = message.text.strip()
        user_id = None
        
        if user_input.startswith("@"):
            try:
                user = await bot.get_chat(user_input)
                user_id = user.id
            except Exception:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ ID –≤—Ä—É—á–Ω—É—é")
                return
        else:
            try:
                user_id = int(user_input)
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username")
                return
        
        users = get_users()
        
        if user_id in users:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø")
            return
        
        users.append(user_id)
        update_users(users)
        reload_env_vars()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        
        user_info = await get_user_display_info(user_id)
        await message.answer(
            f"‚úÖ {user_info} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –≥–æ–≤–æ—Ä—É–Ω",
            reply_markup=get_speaker_management_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ–≤–æ—Ä—É–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
    finally:
        await state.clear()

@dp.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –≥–æ–≤–æ—Ä—É–Ω–∞")
async def remove_speaker_start(message: Message):
    if message.from_user.id != SUPER_ADMIN:
        return
    
    users = get_users()
    
    if not users:
        await message.answer("‚ùå –ù–µ—Ç –≥–æ–≤–æ—Ä—É–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    builder = InlineKeyboardBuilder()
    for user_id in users:
        user_info = await get_user_display_info(user_id)
        builder.button(
            text=user_info,
            callback_data=f"remove_speaker:{user_id}"
        )
    builder.adjust(1)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–≤–æ—Ä—É–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("remove_speaker:"))
async def remove_speaker_callback(callback: CallbackQuery):
    if callback.from_user.id != SUPER_ADMIN:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        user_id = int(callback.data.split(":")[1])
        users = get_users()
        
        if user_id in users:
            users.remove(user_id)
            update_users(users)
            reload_env_vars()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            
            user_info = await get_user_display_info(user_id)
            await callback.message.edit_text(f"‚úÖ {user_info} —É–¥–∞–ª–µ–Ω –∏–∑ –≥–æ–≤–æ—Ä—É–Ω–æ–≤")
        else:
            await callback.message.edit_text("‚ùå –ì–æ–≤–æ—Ä—É–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–≤–æ—Ä—É–Ω–∞: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    finally:
        await callback.answer()

# ======================
# –ù–∞–≤–∏–≥–∞—Ü–∏—è
# ======================

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_admin_main(message: Message):
    if message.from_user.id != SUPER_ADMIN:
        return
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_main_keyboard()
    )

@dp.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    if message.from_user.id != SUPER_ADMIN:
        return
    
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardRemove()
    )

# ======================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ======================

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
